// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tpi.DBContexts;

#nullable disable

namespace tpi.Migrations
{
    [DbContext(typeof(AppTPIContext))]
    [Migration("20220611224120_seedingExpenses")]
    partial class seedingExpenses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("tpi.Entities.ActivityMain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActivityMain");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manufactura",
                            Price = 10000m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Logística",
                            Price = 4000m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mixta",
                            Price = 7000m
                        });
                });

            modelBuilder.Entity("tpi.Entities.ActivityStaffSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActivityStaffSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Micro Empresa",
                            Price = 100m
                        },
                        new
                        {
                            Id = 2,
                            Name = "PyME",
                            Price = 4000m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Grande",
                            Price = 7000m
                        });
                });

            modelBuilder.Entity("tpi.Entities.ActivityWorkLoad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActivityWorkLoads");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Micro Empresa",
                            Price = 100m
                        },
                        new
                        {
                            Id = 2,
                            Name = "PyME",
                            Price = 4000m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Grande",
                            Price = 7000m
                        });
                });

            modelBuilder.Entity("tpi.Entities.EnvironmentalGases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentalGases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nulo",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bajo",
                            Price = 400m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Alto",
                            Price = 7000m
                        });
                });

            modelBuilder.Entity("tpi.Entities.EnvironmentalWaste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentalWastes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Poco",
                            Price = 100m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medio",
                            Price = 4000m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mucho",
                            Price = 7000m
                        });
                });

            modelBuilder.Entity("tpi.Entities.EnvironmentalWaterConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentalWaterConsumptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mínimo",
                            Price = 100m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderado",
                            Price = 4000m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Irrestricto",
                            Price = 15000m
                        });
                });

            modelBuilder.Entity("tpi.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LandId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Period")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalCost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LandId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("tpi.Entities.GeographicArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GeographicAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pequeño",
                            Price = 200m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mediano",
                            Price = 400m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Grande",
                            Price = 600m
                        });
                });

            modelBuilder.Entity("tpi.Entities.GeographicBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GeographicBlocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A",
                            Price = 100m
                        },
                        new
                        {
                            Id = 2,
                            Name = "B",
                            Price = 200m
                        },
                        new
                        {
                            Id = 3,
                            Name = "C",
                            Price = 300m
                        });
                });

            modelBuilder.Entity("tpi.Entities.GeographicCoveredArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GeographicCoveredAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hasta 40%",
                            Price = 1000m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hasta 60%",
                            Price = 4000m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hasta 80%",
                            Price = 6000m
                        });
                });

            modelBuilder.Entity("tpi.Entities.Land", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityMainId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityStaffSizeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityWorkLoadId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnvironmentalGasesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnvironmentalWasteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnvironmentalWaterConsumptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeographicAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeographicBlockId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeographicCoveredAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityMainId");

                    b.HasIndex("ActivityStaffSizeId");

                    b.HasIndex("ActivityWorkLoadId");

                    b.HasIndex("EnvironmentalGasesId");

                    b.HasIndex("EnvironmentalWasteId");

                    b.HasIndex("EnvironmentalWaterConsumptionId");

                    b.HasIndex("GeographicAreaId");

                    b.HasIndex("GeographicBlockId");

                    b.HasIndex("GeographicCoveredAreaId");

                    b.HasIndex("PersonId");

                    b.ToTable("Lands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityMainId = 1,
                            ActivityStaffSizeId = 2,
                            ActivityWorkLoadId = 3,
                            EnvironmentalGasesId = 1,
                            EnvironmentalWasteId = 2,
                            EnvironmentalWaterConsumptionId = 1,
                            GeographicAreaId = 2,
                            GeographicBlockId = 2,
                            GeographicCoveredAreaId = 1,
                            PersonId = 3
                        },
                        new
                        {
                            Id = 2,
                            ActivityMainId = 2,
                            ActivityStaffSizeId = 3,
                            ActivityWorkLoadId = 2,
                            EnvironmentalGasesId = 1,
                            EnvironmentalWasteId = 3,
                            EnvironmentalWaterConsumptionId = 1,
                            GeographicAreaId = 2,
                            GeographicBlockId = 3,
                            GeographicCoveredAreaId = 1,
                            PersonId = 3
                        },
                        new
                        {
                            Id = 3,
                            ActivityMainId = 3,
                            ActivityStaffSizeId = 3,
                            ActivityWorkLoadId = 2,
                            EnvironmentalGasesId = 3,
                            EnvironmentalWasteId = 3,
                            EnvironmentalWaterConsumptionId = 2,
                            GeographicAreaId = 3,
                            GeographicBlockId = 1,
                            GeographicCoveredAreaId = 2,
                            PersonId = 3
                        },
                        new
                        {
                            Id = 4,
                            ActivityMainId = 2,
                            ActivityStaffSizeId = 2,
                            ActivityWorkLoadId = 2,
                            EnvironmentalGasesId = 3,
                            EnvironmentalWasteId = 3,
                            EnvironmentalWaterConsumptionId = 1,
                            GeographicAreaId = 2,
                            GeographicBlockId = 3,
                            GeographicCoveredAreaId = 3,
                            PersonId = 4
                        },
                        new
                        {
                            Id = 5,
                            ActivityMainId = 1,
                            ActivityStaffSizeId = 2,
                            ActivityWorkLoadId = 1,
                            EnvironmentalGasesId = 1,
                            EnvironmentalWasteId = 2,
                            EnvironmentalWaterConsumptionId = 3,
                            GeographicAreaId = 1,
                            GeographicBlockId = 1,
                            GeographicCoveredAreaId = 2,
                            PersonId = 4
                        },
                        new
                        {
                            Id = 6,
                            ActivityMainId = 1,
                            ActivityStaffSizeId = 1,
                            ActivityWorkLoadId = 1,
                            EnvironmentalGasesId = 1,
                            EnvironmentalWasteId = 1,
                            EnvironmentalWaterConsumptionId = 1,
                            GeographicAreaId = 1,
                            GeographicBlockId = 1,
                            GeographicCoveredAreaId = 1,
                            PersonId = 1
                        },
                        new
                        {
                            Id = 7,
                            ActivityMainId = 1,
                            ActivityStaffSizeId = 1,
                            ActivityWorkLoadId = 1,
                            EnvironmentalGasesId = 1,
                            EnvironmentalWasteId = 1,
                            EnvironmentalWaterConsumptionId = 1,
                            GeographicAreaId = 1,
                            GeographicBlockId = 1,
                            GeographicCoveredAreaId = 1,
                            PersonId = 1
                        },
                        new
                        {
                            Id = 8,
                            ActivityMainId = 1,
                            ActivityStaffSizeId = 1,
                            ActivityWorkLoadId = 1,
                            EnvironmentalGasesId = 1,
                            EnvironmentalWasteId = 1,
                            EnvironmentalWaterConsumptionId = 1,
                            GeographicAreaId = 1,
                            GeographicBlockId = 1,
                            GeographicCoveredAreaId = 1,
                            PersonId = 1
                        });
                });

            modelBuilder.Entity("tpi.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "superadmin@email.com",
                            Name = "Esteban Quito",
                            Password = "superadmin",
                            PersonTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "admin@email.com",
                            Name = "Igor Dito",
                            Password = "admin",
                            PersonTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "user@email.com",
                            Name = "Armando Escandalo",
                            Password = "user",
                            PersonTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            Email = "user2@email.com",
                            Name = "Mario Neta",
                            Password = "user2",
                            PersonTypeId = 3
                        });
                });

            modelBuilder.Entity("tpi.Entities.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PersonTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Super Admin"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Usuario"
                        });
                });

            modelBuilder.Entity("tpi.Entities.Expense", b =>
                {
                    b.HasOne("tpi.Entities.Land", "Land")
                        .WithMany()
                        .HasForeignKey("LandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Land");
                });

            modelBuilder.Entity("tpi.Entities.Land", b =>
                {
                    b.HasOne("tpi.Entities.ActivityMain", "ActivityMain")
                        .WithMany()
                        .HasForeignKey("ActivityMainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.ActivityStaffSize", "ActivityStaffSize")
                        .WithMany()
                        .HasForeignKey("ActivityStaffSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.ActivityWorkLoad", "ActivityWorkLoad")
                        .WithMany()
                        .HasForeignKey("ActivityWorkLoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.EnvironmentalGases", "EnvironmentalGases")
                        .WithMany()
                        .HasForeignKey("EnvironmentalGasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.EnvironmentalWaste", "EnvironmentalWaste")
                        .WithMany()
                        .HasForeignKey("EnvironmentalWasteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.EnvironmentalWaterConsumption", "EnvironmentalWaterConsumption")
                        .WithMany()
                        .HasForeignKey("EnvironmentalWaterConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.GeographicArea", "GeographicArea")
                        .WithMany()
                        .HasForeignKey("GeographicAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.GeographicBlock", "GeographicBlock")
                        .WithMany()
                        .HasForeignKey("GeographicBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.GeographicCoveredArea", "GeographicCoveredArea")
                        .WithMany()
                        .HasForeignKey("GeographicCoveredAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tpi.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityMain");

                    b.Navigation("ActivityStaffSize");

                    b.Navigation("ActivityWorkLoad");

                    b.Navigation("EnvironmentalGases");

                    b.Navigation("EnvironmentalWaste");

                    b.Navigation("EnvironmentalWaterConsumption");

                    b.Navigation("GeographicArea");

                    b.Navigation("GeographicBlock");

                    b.Navigation("GeographicCoveredArea");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("tpi.Entities.Person", b =>
                {
                    b.HasOne("tpi.Entities.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonType");
                });
#pragma warning restore 612, 618
        }
    }
}
